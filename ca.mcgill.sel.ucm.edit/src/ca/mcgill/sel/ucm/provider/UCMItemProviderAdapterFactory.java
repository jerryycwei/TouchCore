/**
 */
package ca.mcgill.sel.ucm.provider;

import ca.mcgill.sel.ucm.util.UCMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UCMItemProviderAdapterFactory extends UCMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public UCMItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.AndFork} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AndForkItemProvider andForkItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.AndFork}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAndForkAdapter() {
        if (andForkItemProvider == null) {
            andForkItemProvider = new AndForkItemProvider(this);
        }

        return andForkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.AndJoin} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AndJoinItemProvider andJoinItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.AndJoin}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAndJoinAdapter() {
        if (andJoinItemProvider == null) {
            andJoinItemProvider = new AndJoinItemProvider(this);
        }

        return andJoinItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.OrFork} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OrForkItemProvider orForkItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.OrFork}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOrForkAdapter() {
        if (orForkItemProvider == null) {
            orForkItemProvider = new OrForkItemProvider(this);
        }

        return orForkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.OrJoin} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OrJoinItemProvider orJoinItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.OrJoin}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOrJoinAdapter() {
        if (orJoinItemProvider == null) {
            orJoinItemProvider = new OrJoinItemProvider(this);
        }

        return orJoinItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.EmptyPoint} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EmptyPointItemProvider emptyPointItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.EmptyPoint}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEmptyPointAdapter() {
        if (emptyPointItemProvider == null) {
            emptyPointItemProvider = new EmptyPointItemProvider(this);
        }

        return emptyPointItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.PathNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PathNodeItemProvider pathNodeItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.PathNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPathNodeAdapter() {
        if (pathNodeItemProvider == null) {
            pathNodeItemProvider = new PathNodeItemProvider(this);
        }

        return pathNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.ResponsibilityRef} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ResponsibilityRefItemProvider responsibilityRefItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.ResponsibilityRef}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createResponsibilityRefAdapter() {
        if (responsibilityRefItemProvider == null) {
            responsibilityRefItemProvider = new ResponsibilityRefItemProvider(this);
        }

        return responsibilityRefItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.Responsibility} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ResponsibilityItemProvider responsibilityItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.Responsibility}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createResponsibilityAdapter() {
        if (responsibilityItemProvider == null) {
            responsibilityItemProvider = new ResponsibilityItemProvider(this);
        }

        return responsibilityItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.StartPoint} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StartPointItemProvider startPointItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.StartPoint}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStartPointAdapter() {
        if (startPointItemProvider == null) {
            startPointItemProvider = new StartPointItemProvider(this);
        }

        return startPointItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.NodeConnection} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NodeConnectionItemProvider nodeConnectionItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.NodeConnection}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNodeConnectionAdapter() {
        if (nodeConnectionItemProvider == null) {
            nodeConnectionItemProvider = new NodeConnectionItemProvider(this);
        }

        return nodeConnectionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.UCMModelElement} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected UCMModelElementItemProvider ucmModelElementItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.UCMModelElement}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUCMModelElementAdapter() {
        if (ucmModelElementItemProvider == null) {
            ucmModelElementItemProvider = new UCMModelElementItemProvider(this);
        }

        return ucmModelElementItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.UseCaseMap} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected UseCaseMapItemProvider useCaseMapItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.UseCaseMap}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUseCaseMapAdapter() {
        if (useCaseMapItemProvider == null) {
            useCaseMapItemProvider = new UseCaseMapItemProvider(this);
        }

        return useCaseMapItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.ComponentReference} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComponentReferenceItemProvider componentReferenceItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.ComponentReference}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createComponentReferenceAdapter() {
        if (componentReferenceItemProvider == null) {
            componentReferenceItemProvider = new ComponentReferenceItemProvider(this);
        }

        return componentReferenceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.Component} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComponentItemProvider componentItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.Component}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createComponentAdapter() {
        if (componentItemProvider == null) {
            componentItemProvider = new ComponentItemProvider(this);
        }

        return componentItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.Condition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConditionItemProvider conditionItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.Condition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConditionAdapter() {
        if (conditionItemProvider == null) {
            conditionItemProvider = new ConditionItemProvider(this);
        }

        return conditionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.ucm.EndPoint} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EndPointItemProvider endPointItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.ucm.EndPoint}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEndPointAdapter() {
        if (endPointItemProvider == null) {
            endPointItemProvider = new EndPointItemProvider(this);
        }

        return endPointItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (andForkItemProvider != null) andForkItemProvider.dispose();
        if (andJoinItemProvider != null) andJoinItemProvider.dispose();
        if (orForkItemProvider != null) orForkItemProvider.dispose();
        if (orJoinItemProvider != null) orJoinItemProvider.dispose();
        if (emptyPointItemProvider != null) emptyPointItemProvider.dispose();
        if (pathNodeItemProvider != null) pathNodeItemProvider.dispose();
        if (responsibilityRefItemProvider != null) responsibilityRefItemProvider.dispose();
        if (responsibilityItemProvider != null) responsibilityItemProvider.dispose();
        if (startPointItemProvider != null) startPointItemProvider.dispose();
        if (nodeConnectionItemProvider != null) nodeConnectionItemProvider.dispose();
        if (ucmModelElementItemProvider != null) ucmModelElementItemProvider.dispose();
        if (useCaseMapItemProvider != null) useCaseMapItemProvider.dispose();
        if (componentReferenceItemProvider != null) componentReferenceItemProvider.dispose();
        if (componentItemProvider != null) componentItemProvider.dispose();
        if (conditionItemProvider != null) conditionItemProvider.dispose();
        if (endPointItemProvider != null) endPointItemProvider.dispose();
    }

}
